services:
  nginx:
    build: ./nginx
    container_name: nginx
    profiles: ["prod"]
    ports:
      - "80:80"
    environment:
      - FRONTEND_HOST=frontend
    networks:
      - zotplug_net
    depends_on:
      - frontend

  frontend:
    image: zotpluguci/zot_plug_frontend:beta
    container_name: zot_plug_frontend
    profiles: ["prod"]
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - BASE_URL=http://api:4000
    restart: unless-stopped
    networks:
      - zotplug_net
    depends_on:
      - api
      - postgres

  broker:
    build: ./broker_mqtt
    container_name: broker_mqtt
    ports:
      - "127.0.0.1:1883:1883"
    networks:
      - zotplug_net
    depends_on:
      - postgres

  api:
    build:
      context: .
      dockerfile: rest_api/Dockerfile
    container_name: rest_api
    profiles: ["prod"]
    ports:
      - "127.0.0.1:4000:4000"
    networks:
      - zotplug_net
    depends_on:
      - postgres

  api-dev:
    build:
      context: .
      dockerfile: rest_api/Dockerfile
    container_name: rest_api_dev
    ports:
      - "4000:4000"
    networks:
      - zotplug_net
    depends_on:
      - postgres

  cron:
    build: ./cron
    container_name: cron
    volumes:
      - ~/pg_db/backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - zotplug_net
    depends_on:
      - postgres

  postgres:
    image: postgres:alpine
    container_name: pg_db
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=mydb
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - zotplug_net
    volumes:
      - ~/pg_db/pgdata/:/var/lib/postgresql/data
      - ./pg_db/init.sql:/docker-entrypoint-initdb.d/init.sql

networks:
  zotplug_net:
    driver: bridge
