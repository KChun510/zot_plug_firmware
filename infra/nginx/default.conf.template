# Per-IP request rate (simple protection)
limit_req_zone $binary_remote_addr zone=api_ip:10m rate=10r/s;

# Per-IP concurrent connection cap ( stops slowloris-style abuse )
limit_conn_zone $binary_remote_addr zone=perip:10m;

# "http_upgrade" var is being first checked, then assigned to "connection_upgrade"
# If the incoming "http_upgrade" has any value, set connection_upgrade to upgrade
# Else, no value, then just set to close
map $http_upgrade $connection_upgrade {
default upgrade;
''      close;
}

# HTTP - only used for ACME challenge and redirect
server {
    listen 80;
    server_name zotplug.com www.zotplug.com;

    # Let’s Encrypt Webroot Challenge
    location /.well-known/acme-challenge/ {
        root /data/letsencrypt;
        try_files $uri =404;
    }

    # Redirect all other HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS - Secure traffic
server {
    listen 443 ssl http2;
    server_name zotplug.com www.zotplug.com;

    # ... ssl + timeouts ...

    # ---- Common proxy defaults for ALL locations in this server ----
    proxy_http_version 1.1;
    proxy_set_header Host              $host;
    proxy_set_header X-Forwarded-Host  $host;     # <— add this
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP         $remote_addr;
    # ----------------------------------------------------------------

    error_page 503 = @rate_limited;
    location @rate_limited { ... }

    # Frontend
    location / {
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://frontend_upstream;
    }

    # API (mobile_api -> backend)
    location /mobile_api/ {
        limit_req  zone=api_ip burst=20 nodelay;
        limit_conn perip 20;

        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://api_upstream/;  # (strips /mobile_api/ prefix)
    }
}

# Prep for Load Balancing, round robin style
upstream frontend_upstream { server frontend:3000; }
upstream api_upstream      { server api:4000; }
